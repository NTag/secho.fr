const express     = require('express');
const app         = express();
const fs          = require('fs');
const randomColor = require('randomcolor');
const _           = require('lodash');
const puppeteer   = require('puppeteer');
const useragent   = require('express-useragent');
const punycode    = require('punycode');
const { addWord, splitSentence, loadDictionary } = require('words-splitter');

app.use(useragent.express());

loadDictionary().then(() => {
  if (process.env.WORDS) {
    process.env.WORDS.split(',').forEach(addWord);
  }
});

const SECHO = [
  "c mille cho",
  "awi... s√©cho la",
  "nn m√© att, comment s√©cho",
  "put1, s√©cho",
  "s√©cho de ouf...",
  "s√©cho 2 ouf",
  "s√©cho comme m√™me...",
  "c tro chaud put1",
  "s√©cho s√©cho!",
  "s√© comme m√™me cho",
  "euu, la sa devi1 cho",
  "c 1000 cho de ouf",
  "comment c tro cho...",
  "awi, la s√©cho..",
  "... s√©cho ...",
  "s√©cho, tavu?",
  "la s√© cho de MILLE de ouf!",
  "c vr√©man cho la...",
  "ts√©, la s√©cho.",
  "tavu comment s√©cho oupas?",
  "nan mais la, s√© juste cho o_O!",
  "mais non, mais s√©cho ts√© !",
  "de ouf s√©cho...",
  "ok, la, s√©cho",
  "s√©chooooooooo",
  "s√© tro tro cho",
  "s√©cho.",
  "parait la s√©cho",
  "s√©√©√©√©√© chooooo",
  "l√†, it's very cho..",
  "awi aw√©, s√©cho...",
  "juste, s√©cho.",
  "s√©-cho",
  "c√© vr√©ment tro mille cho ts√©",
  "azy s√©cho la",
  "euuuh, mais s√©cho!",
  "nn m√©, c vr√©man cho",
  "s√©cho, mais de ouf quoi",
  "bah, la.. s√©cho",
  "s√©chüòµ",
  "s√©, juste, cho",
  "s√©cho, √ßtout.",
  "jcroi tapavu komen s√©cho !",
  "bah, s√©chooo",
  "s √© c h o",
  "c cro cro cho",
  "‚ì¢‚ìî‚ìí‚ìó‚ìû",
  "s√© 1000 cho",
  "a naan m√© la... s√©cho",
  "c juste tro tro tro tro tro tro cho",
  "g jam√© ri1 vu d'aussi cho",
  "ben dis donc, s√© bien cho..",
  "hihihi s√©cho",
  "s√©cho bro",
  "s-√©-c-h-o",
  "üò∂",
  "üò∂ üò∂ üò∂",
  "c juste tellement cho",
  "g plu d'mots tellement s√©cho",
  "s√©cho",
  "c cho",
  "s√©cho hihi",
  "comme m√™me s√©cho",
];
const secho = () => {
  const nb = SECHO.length;
  const n  = Math.floor(Math.random() * nb);
  return SECHO[n];
};

const topic = (text) => {
  const sentence = splitSentence(text.toLocaleLowerCase());
  return sentence.slice(0, 1).toLocaleUpperCase() + sentence.slice(1) + ' ?';
};

const template = fs.readFileSync('./index.html', { encoding: 'utf8' });
app.get('/', async (req, res) => {
  if (req.useragent.source.match(/TelegramBot/)) {
    await page.goto(`https://${req.headers.host}`);
    const img = await page.screenshot();
    res.contentType('image/png');
    res.send(img);
  } else {
    const host      = punycode.toUnicode(req.headers.host);
    let text        = template;
    let replaced    = false;
    const hostParts = host.split('.');
    const SECHO     = secho();

    if (hostParts.length > 2) {
      const subDomain = hostParts[0];
      if (subDomain && subDomain !== 'www') {
        const TOPIC = topic(subDomain);
        text = text.replace(/{{TOPIC}}/g, TOPIC);
        text = text.replace(/{{OG_TITLE}}/g, TOPIC);
        text = text.replace(/{{OG_DESCRIPTION}}/g, SECHO);
        text = text.replace(/{{OG_URL}}/g, `${subDomain}.`);
        replaced = true;
      }
    }

    if (!replaced) {
      text = text.replace('<div class="topic">{{TOPIC}}</div>', '');
      text = text.replace('<meta property="og:description" content="{{OG_DESCRIPTION}}" />', '');
      text = text.replace('<meta property="twitter:description" content="{{OG_DESCRIPTION}}" />', '');
      text = text.replace(/{{OG_URL}}/g, '');
      text = text.replace(/{{TOPIC}}/g, '');
      text = text.replace(/{{OG_TITLE}}/g, SECHO);
    }

    text = text.replace(/{{SECHO}}/g, SECHO);
    text = text.replace(/{{COLOR}}/g, randomColor({ luminosity: 'dark' }));

    res.send(text);
  }
});

app.get('/oembed', async (req, res) => {
  const hostParts = req.headers.host.split('.');
  const SECHO     = secho();

  const o = {
    version: "1.0",
    type: "photo",
    width: 800,
    height: 600,
    title: SECHO,
    url: `https://${req.headers.host}/img`,
    author_name: "s√©cho",
    author_url: `https://${req.headers.host}`,
    provider_name: "s√©cho",
    provider_url: "https://s√©cho.fr"
  };

  if (hostParts.length > 2) {
    const subDomain = hostParts[0];
    if (subDomain && subDomain !== 'www') {
      const TOPIC = topic(subDomain);
      o.title = `${TOPIC} ? ${SECHO}`;
    }
  }

  res.send(o);
});

app.get('/img', async (req, res) => {
  await page.goto(`https://${req.headers.host}`);
  const img = await page.screenshot();
  res.contentType('image/png');
  res.send(img);
});

app.use(express.static('public'));

let page;
const main = async () => {
  const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox']});
  page = await browser.newPage();

  app.listen(8080, () => {
    console.log('s√©cho.fr ready on port 8080');
  });
};

main();
